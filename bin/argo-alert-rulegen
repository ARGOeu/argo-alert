#!/usr/bin/env python

from argparse import ArgumentParser
from configparser import ConfigParser
import sys
import logging
from argoalert import argoalert


def main(args=None):

    # Init configuration
    parser = ConfigParser()
    parser.read(args.config)

    feed_type = parser.get("feed", "feed_type")

    log_level = parser.get("logging", "level")
    logging.basicConfig(level=log_level)

    if feed_type == "argo-web-api":

        api_endpoint = parser.get("argo-web-api", "endpoint")
        api_access_key = parser.get("argo-web-api", "access_key")
        api_verify = parser.getboolean("argo-web-api", "verify")
        api_use_notifications_flag = parser.getboolean(
            "argo-web-api", "use_notifications_flag")
        rule_file = parser.get("alerta", "mail-rules")
        environment = None
        if parser.has_option("alerta", "environment"):
            environment = parser.get("alerta", "environment")

        extra_emails = []
        # Check if configuration has extra emails defined
        if parser.has_option("alerta", "extra-emails"):
            extra_value = parser.get("alerta", "extra-emails")
            if extra_value:
                extra_emails = extra_value.split(",")

        test_emails = None
        if args.test_emails is not None:
            test_emails = args.test_emails.split(',')

        gen_endpoint_contacts = False
        gen_endpoint_contacts_group_filter = None
        skip_group_contacts = False
        # Check if configuration has endpoint contacts from groups
        if parser.has_option("alerta", "gen-endpoint-contacts-from-groups"):
            gen_endpoint_contacts = parser.getboolean("alerta", "gen-endpoint-contacts-from-groups")
        if parser.has_option("alerta", "gen-endpoint-contacts-group-filter"):
            gen_endpoint_contacts_group_filter = parser.get("alerta", "gen-endpoint-contacts-group-filter")
        
        # Check if configuration has group contacts for generations
        if parser.has_option("alerta", "skip-group-contacts"):
            skip_group_contacts = parser.getboolean("alerta", "skip-group-contacts")     
                   

        # get endpoint topology
        endpoint_topology_data = argoalert.get_argo_web_api_data(
            api_endpoint, api_access_key, api_verify, "endpoints")

        # get group topology
        group_topology_data = argoalert.get_argo_web_api_data(
            api_endpoint, api_access_key, api_verify, "groups")
        
        # check if configuration dictates to generate endpoint contacts based on group contacts
        if gen_endpoint_contacts:
            endpoint_topology_data = argoalert.gen_endpoint_contacts_from_groups(
                group_topology_data, endpoint_topology_data, gen_endpoint_contacts_group_filter
            )

        if skip_group_contacts:
            group_topology_data = []

        contacts = argoalert.argo_web_api_to_contacts(
            endpoint_topology_data, group_topology_data, api_use_notifications_flag, test_emails)

        

         # Convert contacts to alerta mail rules
        rules = argoalert.contacts_to_alerta(
            contacts, extra_emails, environment)

        # Save rules to alerta mailer rule file
        argoalert.write_rules(rules, rule_file)

    # Handle old cases of gocdb and csv/json
    else:

        # Initialize authorization info object
        auth_info = dict()

        auth_method = parser.get("gocdb", "auth_method")
        if auth_method == "cert":
            auth_info["method"] = "cert"

            auth_info["cert"] = parser.get("gocdb", "hostcert")
            auth_info["key"] = parser.get("gocdb", "hostkey")
        elif auth_method == "basic":
            auth_info["method"] = "basic"
            auth_info["user"] = parser.get("gocdb", "username")
            auth_info["pass"] = parser.get("gocdb", "password")

        gocdb_api = parser.get("gocdb", "api")
        verify = parser.getboolean("gocdb", "verify")
        ca_bundle = None
        if verify:
            ca_bundle = parser.get("gocdb", "cabundle")
        use_notif_flag = parser.getboolean("gocdb", "use_notifications_flag")
        rule_file = parser.get("alerta", "mail-rules")

        top_req = parser.get("gocdb", "top_request")
        sub_req = parser.get("gocdb", "sub_request")

        extra_emails = []
        # Check if configuration has extra emails defined
        if parser.has_option("alerta", "extra-emails"):
            extra_emails = parser.get("alerta", "extra-emails").split(",")

        test_emails = None
        if args.test_emails is not None:
            test_emails = args.test_emails.split(',')

        group_notify_flag = use_notif_flag
        if args.group_notify_flag is not None:
            if args.group_notify_flag.lower() in ('true', 'yes', 'y'):
                group_notify_flag = True
            else:
                group_notify_flag = False

        environment = None
        if parser.has_option("alerta", "environment"):
            environment = parser.get("alerta", "environment")

        # Get site data from gocdb
        top_url = gocdb_api + top_req
        gocdb_site_xml = argoalert.get_gocdb(top_url, auth_info, ca_bundle)

        # Convert top-level gocdb xml data to contacts object
        top_contacts = argoalert.gocdb_to_contacts(
            gocdb_site_xml, group_notify_flag, test_emails)

        # Get sub level contact data from gocdb
        sub_url = gocdb_api + sub_req
        gocdb_service_xml = argoalert.get_gocdb(sub_url, auth_info, ca_bundle)

        # Convert sub-level site gocdb xml data to contacts object
        sub_contacts = argoalert.gocdb_to_contacts(
            gocdb_service_xml, use_notif_flag, test_emails)

        # merge site and service contacts
        contacts = top_contacts + sub_contacts

        # Convert contacts to alerta mail rules
        rules = argoalert.contacts_to_alerta(
            contacts, extra_emails, environment)

        # Save rules to alerta mailer rule file
        argoalert.write_rules(rules, rule_file)


if __name__ == "__main__":

    arg_parser = ArgumentParser(
        description="create argo-alerta mail rules from gocdb contacts")
    arg_parser.add_argument(
        "-c", "--config", help="config", dest="config", metavar="string",
        required="TRUE")
    arg_parser.add_argument(
        "-t", "--test-emails", help="test-emails", dest="test_emails", metavar="string")
    arg_parser.add_argument(
        "-g", "--group-notification-flag", help="use or not the notification flag in top level groups", dest="group_notify_flag", metavar="string")

    # Parse the command line arguments accordingly and introduce them to
    # main...
    sys.exit(main(arg_parser.parse_args()))
