#!/usr/bin/env python

from argparse import ArgumentParser
from ConfigParser import SafeConfigParser
import sys
import logging
from argoalert import argoalert


def main(args=None):

    # Init configuration
    parser = SafeConfigParser()
    parser.read(args.config)

    # Initialize authorization info object
    auth_info = dict()

    auth_method = parser.get("gocdb", "auth_method")
    if auth_method == "cert":
        auth_info["method"] = "cert"

        auth_info["cert"] = parser.get("gocdb", "hostcert")
        auth_info["key"] = parser.get("gocdb", "hostkey")
    elif auth_method == "basic":
        auth_info["method"] = "basic"
        auth_info["user"] = parser.get("gocdb", "username")
        auth_info["pass"] = parser.get("gocdb", "password")

    gocdb_api = parser.get("gocdb", "api")
    verify = parser.getboolean("gocdb", "verify")
    ca_bundle = None
    if verify:
        ca_bundle = parser.get("gocdb", "cabundle")
    use_notif_flag = parser.getboolean("gocdb", "use_notifications_flag")
    rule_file = parser.get("alerta", "mail-rules")
    log_level = parser.get("logging", "level")
    top_req = parser.get("gocdb","top_request")
    sub_req = parser.get("gocdb","sub_request")

    extra_emails = []
    # Check if configuration has extra emails defined
    if parser.has_option("alerta", "extra-emails"):
        extra_emails = parser.get("alerta","extra-emails").split(",")



    logging.basicConfig(level=log_level)

    test_emails = None
    if args.test_emails is not None:
        test_emails = args.test_emails.split(',')

    # Get site data from gocdb
    top_url = gocdb_api + top_req
    gocdb_site_xml = argoalert.get_gocdb(top_url, auth_info, ca_bundle)

    # Convert top-level gocdb xml data to contacts object
    top_contacts = argoalert.gocdb_to_contacts(gocdb_site_xml, use_notif_flag, test_emails)

    # Get sub level contact data from gocdb
    sub_url = gocdb_api + sub_req
    gocdb_service_xml = argoalert.get_gocdb(sub_url, auth_info, ca_bundle)

    # Convert sub-level site gocdb xml data to contacts object
    sub_contacts = argoalert.gocdb_to_contacts(gocdb_service_xml, use_notif_flag, test_emails)

    # merge site and service contacts
    contacts = top_contacts + sub_contacts

    # Convert contacts to alerta mail rules
    rules = argoalert.contacts_to_alerta(contacts, extra_emails)

    # Save rules to alerta mailer rule file
    argoalert.write_rules(rules, rule_file)


if __name__ == "__main__":

    arg_parser = ArgumentParser(
        description="create argo-alerta mail rules from gocdb contacts")
    arg_parser.add_argument(
        "-c", "--config", help="config", dest="config", metavar="string",
        required="TRUE")
    arg_parser.add_argument(
        "-t", "--test-emails", help="test-emails", dest="test_emails", metavar="string")

    # Parse the command line arguments accordingly and introduce them to
    # main...
    sys.exit(main(arg_parser.parse_args()))
